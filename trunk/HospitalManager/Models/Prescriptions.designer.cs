#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalManager.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class PrescriptionsDatabase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPrescription(Prescription instance);
    partial void UpdatePrescription(Prescription instance);
    partial void DeletePrescription(Prescription instance);
    partial void InsertMedication(Medication instance);
    partial void UpdateMedication(Medication instance);
    partial void DeleteMedication(Medication instance);
    #endregion
		
		public PrescriptionsDatabase() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HospitalManagerDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionsDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionsDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionsDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PrescriptionsDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Prescription> Prescriptions
		{
			get
			{
				return this.GetTable<Prescription>();
			}
		}
		
		public System.Data.Linq.Table<Medication> Medications
		{
			get
			{
				return this.GetTable<Medication>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Prescriptions")]
	public partial class Prescription : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrescriptionID;
		
		private int _UserID;
		
		private int _DoctorUserID;
		
		private int _MedicationID;
		
		private int _Quantity;
		
		private int _NumRefills;
		
		private int _mgPerPill;
		
		private string _Instructions;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _RefillDate;
		
		private int _PharmacistID;
		
		private int _FillStatus;
		
		private EntityRef<Medication> _Medication;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrescriptionIDChanging(int value);
    partial void OnPrescriptionIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDoctorUserIDChanging(int value);
    partial void OnDoctorUserIDChanged();
    partial void OnMedicationIDChanging(int value);
    partial void OnMedicationIDChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    partial void OnNumRefillsChanging(int value);
    partial void OnNumRefillsChanged();
    partial void OnmgPerPillChanging(int value);
    partial void OnmgPerPillChanged();
    partial void OnInstructionsChanging(string value);
    partial void OnInstructionsChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnRefillDateChanging(System.DateTime value);
    partial void OnRefillDateChanged();
    partial void OnPharmacistIDChanging(int value);
    partial void OnPharmacistIDChanged();
    partial void OnFillStatusChanging(int value);
    partial void OnFillStatusChanged();
    #endregion
		
		public Prescription()
		{
			this._Medication = default(EntityRef<Medication>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrescriptionID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PrescriptionID
		{
			get
			{
				return this._PrescriptionID;
			}
			set
			{
				if ((this._PrescriptionID != value))
				{
					this.OnPrescriptionIDChanging(value);
					this.SendPropertyChanging();
					this._PrescriptionID = value;
					this.SendPropertyChanged("PrescriptionID");
					this.OnPrescriptionIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoctorUserID", DbType="Int NOT NULL")]
		public int DoctorUserID
		{
			get
			{
				return this._DoctorUserID;
			}
			set
			{
				if ((this._DoctorUserID != value))
				{
					this.OnDoctorUserIDChanging(value);
					this.SendPropertyChanging();
					this._DoctorUserID = value;
					this.SendPropertyChanged("DoctorUserID");
					this.OnDoctorUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicationID", DbType="Int NOT NULL")]
		public int MedicationID
		{
			get
			{
				return this._MedicationID;
			}
			set
			{
				if ((this._MedicationID != value))
				{
					if (this._Medication.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMedicationIDChanging(value);
					this.SendPropertyChanging();
					this._MedicationID = value;
					this.SendPropertyChanged("MedicationID");
					this.OnMedicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NumRefills", DbType="Int NOT NULL")]
		public int NumRefills
		{
			get
			{
				return this._NumRefills;
			}
			set
			{
				if ((this._NumRefills != value))
				{
					this.OnNumRefillsChanging(value);
					this.SendPropertyChanging();
					this._NumRefills = value;
					this.SendPropertyChanged("NumRefills");
					this.OnNumRefillsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mgPerPill", DbType="Int NOT NULL")]
		public int mgPerPill
		{
			get
			{
				return this._mgPerPill;
			}
			set
			{
				if ((this._mgPerPill != value))
				{
					this.OnmgPerPillChanging(value);
					this.SendPropertyChanging();
					this._mgPerPill = value;
					this.SendPropertyChanged("mgPerPill");
					this.OnmgPerPillChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Instructions", DbType="Text NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Instructions
		{
			get
			{
				return this._Instructions;
			}
			set
			{
				if ((this._Instructions != value))
				{
					this.OnInstructionsChanging(value);
					this.SendPropertyChanging();
					this._Instructions = value;
					this.SendPropertyChanged("Instructions");
					this.OnInstructionsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="Date NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RefillDate", DbType="Date NOT NULL")]
		public System.DateTime RefillDate
		{
			get
			{
				return this._RefillDate;
			}
			set
			{
				if ((this._RefillDate != value))
				{
					this.OnRefillDateChanging(value);
					this.SendPropertyChanging();
					this._RefillDate = value;
					this.SendPropertyChanged("RefillDate");
					this.OnRefillDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PharmacistID", DbType="Int NOT NULL")]
		public int PharmacistID
		{
			get
			{
				return this._PharmacistID;
			}
			set
			{
				if ((this._PharmacistID != value))
				{
					this.OnPharmacistIDChanging(value);
					this.SendPropertyChanging();
					this._PharmacistID = value;
					this.SendPropertyChanged("PharmacistID");
					this.OnPharmacistIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FillStatus", DbType="Int NOT NULL")]
		public int FillStatus
		{
			get
			{
				return this._FillStatus;
			}
			set
			{
				if ((this._FillStatus != value))
				{
					this.OnFillStatusChanging(value);
					this.SendPropertyChanging();
					this._FillStatus = value;
					this.SendPropertyChanged("FillStatus");
					this.OnFillStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medication_Prescription", Storage="_Medication", ThisKey="MedicationID", OtherKey="MedicationID", IsForeignKey=true)]
		public Medication Medication
		{
			get
			{
				return this._Medication.Entity;
			}
			set
			{
				Medication previousValue = this._Medication.Entity;
				if (((previousValue != value) 
							|| (this._Medication.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Medication.Entity = null;
						previousValue.Prescriptions.Remove(this);
					}
					this._Medication.Entity = value;
					if ((value != null))
					{
						value.Prescriptions.Add(this);
						this._MedicationID = value.MedicationID;
					}
					else
					{
						this._MedicationID = default(int);
					}
					this.SendPropertyChanged("Medication");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Medications")]
	public partial class Medication : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MedicationID;
		
		private string _MedicationName;
		
		private decimal _PricePerMg;
		
		private EntitySet<Prescription> _Prescriptions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMedicationIDChanging(int value);
    partial void OnMedicationIDChanged();
    partial void OnMedicationNameChanging(string value);
    partial void OnMedicationNameChanged();
    partial void OnPricePerMgChanging(decimal value);
    partial void OnPricePerMgChanged();
    #endregion
		
		public Medication()
		{
			this._Prescriptions = new EntitySet<Prescription>(new Action<Prescription>(this.attach_Prescriptions), new Action<Prescription>(this.detach_Prescriptions));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MedicationID
		{
			get
			{
				return this._MedicationID;
			}
			set
			{
				if ((this._MedicationID != value))
				{
					this.OnMedicationIDChanging(value);
					this.SendPropertyChanging();
					this._MedicationID = value;
					this.SendPropertyChanged("MedicationID");
					this.OnMedicationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MedicationName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string MedicationName
		{
			get
			{
				return this._MedicationName;
			}
			set
			{
				if ((this._MedicationName != value))
				{
					this.OnMedicationNameChanging(value);
					this.SendPropertyChanging();
					this._MedicationName = value;
					this.SendPropertyChanged("MedicationName");
					this.OnMedicationNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PricePerMg", DbType="Money NOT NULL")]
		public decimal PricePerMg
		{
			get
			{
				return this._PricePerMg;
			}
			set
			{
				if ((this._PricePerMg != value))
				{
					this.OnPricePerMgChanging(value);
					this.SendPropertyChanging();
					this._PricePerMg = value;
					this.SendPropertyChanged("PricePerMg");
					this.OnPricePerMgChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Medication_Prescription", Storage="_Prescriptions", ThisKey="MedicationID", OtherKey="MedicationID")]
		public EntitySet<Prescription> Prescriptions
		{
			get
			{
				return this._Prescriptions;
			}
			set
			{
				this._Prescriptions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Medication = this;
		}
		
		private void detach_Prescriptions(Prescription entity)
		{
			this.SendPropertyChanging();
			entity.Medication = null;
		}
	}
}
#pragma warning restore 1591
