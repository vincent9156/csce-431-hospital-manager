#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HospitalManager.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="HospitalManagerDB")]
	public partial class UserBillingInformationDatabase : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertCreditCardInformation(CreditCardInformation instance);
    partial void UpdateCreditCardInformation(CreditCardInformation instance);
    partial void DeleteCreditCardInformation(CreditCardInformation instance);
    partial void InsertCardProvider(CardProvider instance);
    partial void UpdateCardProvider(CardProvider instance);
    partial void DeleteCardProvider(CardProvider instance);
    #endregion
		
		public UserBillingInformationDatabase() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["HospitalManagerDBConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public UserBillingInformationDatabase(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserBillingInformationDatabase(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserBillingInformationDatabase(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public UserBillingInformationDatabase(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<CreditCardInformation> CreditCardInformations
		{
			get
			{
				return this.GetTable<CreditCardInformation>();
			}
		}
		
		public System.Data.Linq.Table<CardProvider> CardProviders
		{
			get
			{
				return this.GetTable<CardProvider>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CreditCardInformation")]
	public partial class CreditCardInformation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CardProviderID;
		
		private string _CardNumber;
		
		private int _SecurityCode;
		
		private int _ExpirationMonth;
		
		private int _ExpirationYear;
		
		private int _UserID;
		
		private string _BillingAddress;
		
		private System.Data.Linq.Binary _InsurancePolicyNumber;
		
		private string _InsuranceProviderName;
		
		private EntityRef<CardProvider> _CardProvider;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCardProviderIDChanging(int value);
    partial void OnCardProviderIDChanged();
    partial void OnCardNumberChanging(string value);
    partial void OnCardNumberChanged();
    partial void OnSecurityCodeChanging(int value);
    partial void OnSecurityCodeChanged();
    partial void OnExpirationMonthChanging(int value);
    partial void OnExpirationMonthChanged();
    partial void OnExpirationYearChanging(int value);
    partial void OnExpirationYearChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnBillingAddressChanging(string value);
    partial void OnBillingAddressChanged();
    partial void OnInsurancePolicyNumberChanging(System.Data.Linq.Binary value);
    partial void OnInsurancePolicyNumberChanged();
    partial void OnInsuranceProviderNameChanging(string value);
    partial void OnInsuranceProviderNameChanged();
    #endregion
		
		public CreditCardInformation()
		{
			this._CardProvider = default(EntityRef<CardProvider>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardProviderID", DbType="Int NOT NULL")]
		public int CardProviderID
		{
			get
			{
				return this._CardProviderID;
			}
			set
			{
				if ((this._CardProviderID != value))
				{
					if (this._CardProvider.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCardProviderIDChanging(value);
					this.SendPropertyChanging();
					this._CardProviderID = value;
					this.SendPropertyChanged("CardProviderID");
					this.OnCardProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CardNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string CardNumber
		{
			get
			{
				return this._CardNumber;
			}
			set
			{
				if ((this._CardNumber != value))
				{
					this.OnCardNumberChanging(value);
					this.SendPropertyChanging();
					this._CardNumber = value;
					this.SendPropertyChanged("CardNumber");
					this.OnCardNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityCode", DbType="Int NOT NULL")]
		public int SecurityCode
		{
			get
			{
				return this._SecurityCode;
			}
			set
			{
				if ((this._SecurityCode != value))
				{
					this.OnSecurityCodeChanging(value);
					this.SendPropertyChanging();
					this._SecurityCode = value;
					this.SendPropertyChanged("SecurityCode");
					this.OnSecurityCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationMonth", DbType="Int NOT NULL")]
		public int ExpirationMonth
		{
			get
			{
				return this._ExpirationMonth;
			}
			set
			{
				if ((this._ExpirationMonth != value))
				{
					this.OnExpirationMonthChanging(value);
					this.SendPropertyChanging();
					this._ExpirationMonth = value;
					this.SendPropertyChanged("ExpirationMonth");
					this.OnExpirationMonthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ExpirationYear", DbType="Int NOT NULL")]
		public int ExpirationYear
		{
			get
			{
				return this._ExpirationYear;
			}
			set
			{
				if ((this._ExpirationYear != value))
				{
					this.OnExpirationYearChanging(value);
					this.SendPropertyChanging();
					this._ExpirationYear = value;
					this.SendPropertyChanged("ExpirationYear");
					this.OnExpirationYearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BillingAddress", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string BillingAddress
		{
			get
			{
				return this._BillingAddress;
			}
			set
			{
				if ((this._BillingAddress != value))
				{
					this.OnBillingAddressChanging(value);
					this.SendPropertyChanging();
					this._BillingAddress = value;
					this.SendPropertyChanged("BillingAddress");
					this.OnBillingAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsurancePolicyNumber", DbType="VarBinary(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary InsurancePolicyNumber
		{
			get
			{
				return this._InsurancePolicyNumber;
			}
			set
			{
				if ((this._InsurancePolicyNumber != value))
				{
					this.OnInsurancePolicyNumberChanging(value);
					this.SendPropertyChanging();
					this._InsurancePolicyNumber = value;
					this.SendPropertyChanged("InsurancePolicyNumber");
					this.OnInsurancePolicyNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InsuranceProviderName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string InsuranceProviderName
		{
			get
			{
				return this._InsuranceProviderName;
			}
			set
			{
				if ((this._InsuranceProviderName != value))
				{
					this.OnInsuranceProviderNameChanging(value);
					this.SendPropertyChanging();
					this._InsuranceProviderName = value;
					this.SendPropertyChanged("InsuranceProviderName");
					this.OnInsuranceProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardProvider_CreditCardInformation", Storage="_CardProvider", ThisKey="CardProviderID", OtherKey="ProviderID", IsForeignKey=true)]
		public CardProvider CardProvider
		{
			get
			{
				return this._CardProvider.Entity;
			}
			set
			{
				CardProvider previousValue = this._CardProvider.Entity;
				if (((previousValue != value) 
							|| (this._CardProvider.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CardProvider.Entity = null;
						previousValue.CreditCardInformations.Remove(this);
					}
					this._CardProvider.Entity = value;
					if ((value != null))
					{
						value.CreditCardInformations.Add(this);
						this._CardProviderID = value.ProviderID;
					}
					else
					{
						this._CardProviderID = default(int);
					}
					this.SendPropertyChanged("CardProvider");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CardProvider")]
	public partial class CardProvider : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProviderID;
		
		private string _ProviderName;
		
		private EntitySet<CreditCardInformation> _CreditCardInformations;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProviderIDChanging(int value);
    partial void OnProviderIDChanged();
    partial void OnProviderNameChanging(string value);
    partial void OnProviderNameChanged();
    #endregion
		
		public CardProvider()
		{
			this._CreditCardInformations = new EntitySet<CreditCardInformation>(new Action<CreditCardInformation>(this.attach_CreditCardInformations), new Action<CreditCardInformation>(this.detach_CreditCardInformations));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ProviderID
		{
			get
			{
				return this._ProviderID;
			}
			set
			{
				if ((this._ProviderID != value))
				{
					this.OnProviderIDChanging(value);
					this.SendPropertyChanging();
					this._ProviderID = value;
					this.SendPropertyChanged("ProviderID");
					this.OnProviderIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderName", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ProviderName
		{
			get
			{
				return this._ProviderName;
			}
			set
			{
				if ((this._ProviderName != value))
				{
					this.OnProviderNameChanging(value);
					this.SendPropertyChanging();
					this._ProviderName = value;
					this.SendPropertyChanged("ProviderName");
					this.OnProviderNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CardProvider_CreditCardInformation", Storage="_CreditCardInformations", ThisKey="ProviderID", OtherKey="CardProviderID")]
		public EntitySet<CreditCardInformation> CreditCardInformations
		{
			get
			{
				return this._CreditCardInformations;
			}
			set
			{
				this._CreditCardInformations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CreditCardInformations(CreditCardInformation entity)
		{
			this.SendPropertyChanging();
			entity.CardProvider = this;
		}
		
		private void detach_CreditCardInformations(CreditCardInformation entity)
		{
			this.SendPropertyChanging();
			entity.CardProvider = null;
		}
	}
}
#pragma warning restore 1591
